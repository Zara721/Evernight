const utils = {  
  withGrid(n) {
    return n * 32;
  },
  
  asGridCoords(x,y) {
    return `${x*32},${y*32}`;
  },
  
  nextPosition(initX, initY, direction) {
    let x = initX;
    let y = initY;
    const size = 32;
    if (direction === "left") {
      x-= size
    } else if (direction === "right") {
      x+= size
    } else if (direction === "up") {
      y-= size
    } else if (direction === "down") {
      y+= size
    } 
    //console.log(x,y)
    return {x,y};    
  },
  
  emitEvent(name, detail) {
    const event = new CustomEvent(name, {
          detail
    });
    document.dispatchEvent(event);
  }
}

class DirectionInput {
  constructor() {
    this.heldDirections = [];
    
    this.map = {
      "KeyW":"up",
      "KeyS":"down",
      "KeyA":"left",
      "KeyD":"right",
      
      "ArrowUp":"up",
      "ArrowDown":"down",
      "ArrowLeft":"left",
      "ArrowRight":"right",
    }
  }
  
  get direction() {
    return this.heldDirections[0];
  }
  
  init() {
    document.addEventListener("keydown", (e) => {
      const dir = this.map[e.code];
      if (dir && this.heldDirections.indexOf(dir) === -1) {
        this.heldDirections.unshift(dir);
      }
    });
    
    document.addEventListener("keyup", (e) => {
      const dir = this.map[e.code];
      const index = this.heldDirections.indexOf(dir);
      if (index > -1) {
        this.heldDirections.splice(index, 1);
      }
    })
    
  }
}


class World {
  constructor(config) {
    this.element = config.element;
    this.canvas = this.element.querySelector(".game-canvas");
    this.ctx = this.canvas.getContext("2d");
  }
  
  startGameLoop() {
    const loop = () => {
      
      this.ctx.imageSmoothingEnabled = false;
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); 
      
      //Estabish camera person
      const camPerson = this.map.gameObjects.mc;
      
      //Update all objects
      Object.values(this.map.gameObjects).forEach(object => {
         object.update({
           arrow: this.directionInput.direction,
           map: this.map,
         })
       })
      
      //Draw Lower Image, the base background image
      this.map.drawLowerImage(this.ctx, camPerson);
        
      //Draw Game Objects, like player character and npcs
       Object.values(this.map.gameObjects).sort((a,b) => {
         //organise so that the lower y values are near the start of the array 
         //to avoid inconguint overlap
         return a.y - b.y;
       }).forEach(object => {
         object.sprite.draw(this.ctx, camPerson);
       })
      
      //Draw Upper Image, the foreground
      this.map.drawUpperImage(this.ctx, camPerson);
      
      
      requestAnimationFrame(() => {
        loop();
      })
    }
    loop();
  }
  
  init() {
    this.map = new WorldMap(OverworldMaps["ccIsland"]);
    this.map.mountObjects();
    console.log(this.map.walls);
    
    this.directionInput = new DirectionInput();
    this.directionInput.init();
    this.directionInput.direction; //"down"
    
    this.startGameLoop();
    
    this.map.startCutscene([
      {who: "mc", type: "walk", direction: "down"},
      {who: "mc", type: "walk", direction: "down"},
      {who: "mc", type: "walk", direction: "down"},
      {who: "mc", type: "walk", direction: "down"},
      {who: "mc", type: "walk", direction: "right"},
      {who: "mc", type: "walk", direction: "right"},
      {who: "mc", type: "stand", direction: "right", time: 800},
      {who: "npc1", type: "walk", direction: "left"},
      {who: "npc1", type: "walk", direction: "left"},
      {who: "npc1",type: "walk", direction: "down"},
      {who: "npc1", type: "walk", direction: "down"},
      {who: "npc1", type: "walk", direction: "down"},
      {who: "npc1", type: "stand", direction: "left", time: 800}, 
      {type: "textMessage", text: "Greetings, welcome to Evernight!"},
    ])
    
  }
}

class GameObject {
  constructor(config) {
    this.id = null;
    this.isMounted = false;
    this.x = config.x || 0;
    this.y = config.y || 0;
    this.direction = config.direction || "down";
    this.sprite = new Sprite ({
      gameObject: this,
      src: config.src,
    });
    
    this.behaviourLoop = config.behaviourLoop || [];
    this.behaviourLoopIndex = 0;
  }
  
  mount(map) {
    console.log("mounting")
    this.isMounted = true;
    map.addWall(this.x, this.y);
    
    //If there is a behaviour, then start the transition after a short delay
    setTimeout(() => {
      this.doBehaviourEvent(map);
    }, 10)
  }
  
  update() {
    
  }
  
  async doBehaviourEvent(map) {
    
    //Basically, don't do anything if there is a higher priority cutscene
    //or there is no config on the sprite
    if(map.isCutscenePlaying || this.behaviourLoop.length === 0 || this.isStanding) {
      return;
    }
    
    //Setting up event with relevant info
    let eventConfig = this.behaviourLoop[this.behaviourLoopIndex];
    eventConfig.who = this.id;
    
    //Creat an event instance based on the next event config
    const eventHandler = new WorldEvent({map, event: eventConfig});
    //await keyword to prevent an infinite loop, and gives a timing gap
    await eventHandler.init(); 
    
    //Setting the next event to fire
    this.behaviourLoopIndex += 1;
    if (this.behaviourLoopIndex === this.behaviourLoop.length) {
      this.behaviourLoopIndex = 0;
    }
    
    //Do it again
    this.doBehaviourEvent(map);
  }
  
  
}

class Person extends GameObject {
  constructor(config) {
    super(config);
    this.movingProgressRemaining = 0;
    this.isStanding = false;
    
    this.isPlayerControlled = config.isPlayerControlled || false;
    
    this.directionUpdate = {
      "up": ["y", -2],
      "down": ["y", 2],
      "left": ["x", -2],
      "right": ["x", 2],
    };
  }
  
  update(state) {
    if (this.movingProgressRemaining > 0) {
      this.updatePosition();
    } else {
        
        //Placeholder for more cases for starting to walk
        
        //Basically the user is allowed to provide input and has an arrow pressed and no cutscene playing
        if(state.map.isCutscenePlaying === false && this.isPlayerControlled === true && state.arrow) {
          //move in that direction
            this.startBehaviour(state, {
              type: "walk",
              direction: state.arrow
            })
        }
      this.updateSprite(state);
    }
  }
  
  startBehaviour(state, behaviour) {
      //setting the character direction to whatever behaviour has
      this.direction = behaviour.direction;
      
      if (behaviour.type === "walk") {
        
        //stop here if space is not free
        if (state.map.isSpaceTaken(this.x, this.y, this.direction)) {
          
          behaviour.retry && setTimeout(() => {
            this.startBehaviour(state, behaviour)
          }, 10)
          return;
        }
          console.log(state.map.isSpaceTaken(this.x, this.y, this.direction));
          console.log(this.x, this.y, this.direction);
          
          //ready to walk
          state.map.moveWall(this.x, this.y, this.direction);
          this.movingProgressRemaining = 16;
          this.updateSprite(state)
      }
    
    if(behaviour.type === "stand") {
      this.isStanding = true;
      setTimeout(() => {
        utils.emitEvent("PersonStandingComplete", {
          whoId: this.id
        })
        this.isStanding = false;
      }, behaviour.time)
    }
  }
  
  updatePosition() {
      const [property, change] = this.directionUpdate[this.direction];
      this[property] += change;
      this.movingProgressRemaining -= 1;
    
      if(this.movingProgressRemaining === 0) {
        //The player has finished the walk
        utils.emitEvent("PersonWalkingComplete", {
          whoId: this.id
        })
      }
  }
  
  updateSprite() {
     if (this.movingProgressRemaining > 0) {
      this.sprite.setAnimation("walk-" + this.direction);
      return;
    }
    this.sprite.setAnimation("idle-" + this.direction);      
  }
}

class Sprite {
  constructor(config) {
    //Set up the image
    this.image = new Image ();
    this.image.src = config.src
    this.image.onload = () => {
      this.Loaded = true;
    }
    
    //config animation and inital state
    this.animations = config.animations || {
      "idle-down": [ [0,0] ],
      "idle-left": [ [0,1] ],
      "idle-right": [ [0,2] ],
      "idle-up": [ [0,3] ],
      "walk-down": [ [1,0], [0,0], [3,0], [0,0] ],
      "walk-left": [ [1,1], [0,1], [3,1], [0,1] ],
      "walk-right": [ [1,2], [0,2], [3,2], [0,2] ],
      "walk-up": [ [1,3], [0,3], [3,3], [0,3] ]
    }
    this.currentAnimation = "idle-down"//config.currentAnimation || "idle-down";
    this.currentAnimationFrame = 0;
    
    this.animationFrameLimit = config.animationFrameLimit || 12;
    this.animationFrameProgress = this.animationFrameLimit;
    
    //Reference the game object
    this.gameObject = config.gameObject;
  }
  
  get frame() {
    return this.animations[this.currentAnimation][this.currentAnimationFrame];
  }
  
  setAnimation(key) {
    if(this.currentAnimation !== key) {
      this.currentAnimation = key;
      this.currentAnimationFrame = 0;
      this.animationFrameProgress = this.animationFrameLimit;
    }
  }
  
  updateAnimationProgress() {
    //Countdown frame progress
    if(this.animationFrameProgress > 0) {
      this.animationFrameProgress -= 1;
      return;
    }
    
    //Resetting the counter
    this.animationFrameProgress = this.animationFrameLimit;
    this.currentAnimationFrame +=1;
    
    if(this.frame == undefined) {
      this.currentAnimationFrame = 0;
    }
    
  }
  
  draw(ctx, camPerson) {
    const x = this.gameObject.x + 405 - camPerson.x;
    const y = this.gameObject.y + 210 - camPerson.y;
    
    const [frameX, frameY] = this.frame;
    
    this.Loaded && ctx.drawImage(this.image, 
      frameX*32, frameY*48, //x,y starting position
      32, 48, // width, height of the frame in the sprite sheet
      x, y, //x,y position to draw at
      32, 48 // width, height of the frame in the canvas    
    )
    
    this.updateAnimationProgress();
  }
}
  


class WorldMap {
  constructor(config) {
    this.gameObjects = config.gameObjects;
    this.walls = config.walls || {};
    
    this.lowerImage = new Image();
    this.lowerImage.src = config.lowerSrc;
    
    this.upperImage = new Image();
    this.upperImage.src = config.upperSrc;
    
    this.isCutscenePlaying = false;
    
  }
  
  drawLowerImage(ctx, camPerson) {
    ctx.drawImage(
      this.lowerImage, 
      405 - camPerson.x, 
      210 - camPerson.y
    );
  }
  
  drawUpperImage(ctx, camPerson) {
    ctx.drawImage(
      this.upperImage, 
      405 - camPerson.x, 
      210 - camPerson.y
    );
  }
  
  
  isSpaceTaken(currentX, currentY, direction) {
      const {x,y} = utils.nextPosition(currentX, currentY, direction);
      return this.walls[`${x},${y}`] || false;
  }
  
  mountObjects() {
    Object.keys(this.gameObjects).forEach(key => {  
      
      let object = this.gameObjects[key];
      object.id = key;
      
      //Placeholder for objects not needed to be mounted
      object.mount(this);
       })
  }
  
  async startCutscene(events) {
    this.isCutscenePlaying = true;
    
    //Loop of async events that awaits for each event to occur
    for(let i = 0; i < events.length; i++) {
      const eventHandler = new WorldEvent({
        event: events[i],
        map: this,
      })
      await eventHandler.init();
    }
    
    this.isCutscenePlaying = false;
    
    //reset Npc's to do their idle behaviour
    Object.values(this.gameObjects).forEach(object => object.doBehaviourEvent(this))
  }
  
  addWall(x,y) {
    this.walls[`${x},${y}`] = true;
  }
  removeWall(x,y) {
    delete this.walls[`${x},${y}`]
  }
  moveWall(wasX, wasY, direction) {
    this.removeWall(wasX, wasY);
    const {x,y} = utils.nextPosition(wasX, wasY, direction);
    this.addWall(x,y);
  }
  
}

const OverworldMaps = {
  ccIsland: {
    lowerSrc: "./images/ccWorld.png",
    upperSrc: "./images/ccForeground.png",
    gameObjects: {
      mc: new Person ({
        isPlayerControlled: true,
        x: utils.withGrid(7),
        y: utils.withGrid(10),
        src:  "./images/ccMc.png",
      }),
      npc1: new Person ({
        x: utils.withGrid(18),
        y: utils.withGrid(11),
        src:  "./images/ccWorldAster.png",
        behaviourLoop: [
          { type: "walk", direction: "right"},
          { type: "stand", direction: "up", time: 800},
          { type: "walk", direction: "up"},
          { type: "walk", direction: "left"},
          { type: "walk", direction: "down"},
        ]
      }), 
       npc2: new Person ({
        x: utils.withGrid(32),
        y: utils.withGrid(15),
        src:  "./images/ccWorldAmberly.png",
        behaviourLoop: [
          { type: "stand", direction: "left", time: 800},
          { type: "stand", direction: "down", time: 800},
          { type: "stand", direction: "right", time: 1200},
          { type: "stand", direction: "up", time: 300},
        ]
      }), 
    },
    walls: {
      //blue house
      [utils.asGridCoords(8,7)] : true,
      [utils.asGridCoords(9,7)] : true,
      [utils.asGridCoords(8,6)] : true,
      [utils.asGridCoords(9,6)] : true,
      
      //side of the island
      [utils.asGridCoords(4,3)] : true,
      [utils.asGridCoords(3,4)] : true,
      [utils.asGridCoords(3,5)] : true,
      [utils.asGridCoords(3,6)] : true,
      [utils.asGridCoords(3,7)] : true, 
    }
  }
};


class WorldEvent {
  constructor({map, event}) {
    this.map = map;
    this.event = event;
  }
  
  stand(resolve) {
    const who = this.map.gameObjects [ this.event.who ]
    who.startBehaviour({
      map: this.map
    }, {
      type: "stand",
      direction: this.event.direction,
      time: this.event.time
    })
    
    //Set up a handler to complete when the person has finished walking, then resolve event
    const completeHandler = e => {
      if (e.detail.whoId === this.event.who) {
        document.removeEventListener("PersonStandingComplete", completeHandler);
        resolve();
      }
    }
    
    document.addEventListener("PersonStandingComplete", completeHandler)
  }
  
  walk(resolve) {
    const who = this.map.gameObjects [ this.event.who ]
    who.startBehaviour({
      map: this.map
    }, {
      type: "walk",
      direction: this.event.direction,
      retry: true
    })
    
    //Set up a handler to complete when the person has finished walking, then resolve event
    const completeHandler = e => {
      if (e.detail.whoId === this.event.who) {
        document.removeEventListener("PersonWalkingComplete", completeHandler);
        resolve();
      }
    }
    
    document.addEventListener("PersonWalkingComplete", completeHandler)
  }
  
  textMessage(resolve) {
    const message =  new TextMessage({
      text: this.event.text,
      onComplete: () => resolve()
    })
    message.init( document.querySelector(".game-container") )
  }
  
  init() {
    return new Promise(resolve => {
      this[this.event.type](resolve)
    })
  }
  
}
  

class TextMessage {
  constructor({text, onComplete}) {
    this.text = text;
    this.onComplete = onComplete
    this.element = null;
  }
  
  createElement() {
    //Create element
    this.element = document.createElement("div");
    this.element.classList.add("TextMessage");
    
    this.element.innerHTML = (`
      <p class = "TextMessage_p">${this.text}</p>
      <button class = "TextMessage_button">Next</button>
    `)
    
    this.element.querySelector("button").addEventListener("click", () => {
      //Close the text message
      this.done()
    })
  }
  
  done() {
    this.element.remove();
    this.onComplete();
  }
  
  init(container) {
    this.createElement();
    container.appendChild(this.element)
  }
}


(function () {
  const world = new World ({
  element: document.querySelector(".game-container")
  });
  world.init();
})();
